import { Directive, ElementRef, Input, Output, forwardRef, Renderer2, EventEmitter, Optional, Inject, } from '@angular/core';
import { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { IMaskFactory } from './imask-factory';
export const MASKEDINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => IMaskDirective),
    multi: true
};
const DEFAULT_IMASK_ELEMENT = (elementRef) => elementRef.nativeElement;
const ɵ0 = DEFAULT_IMASK_ELEMENT;
export class IMaskDirective {
    constructor(_elementRef, _renderer, _factory, _compositionMode) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._factory = _factory;
        this._compositionMode = _compositionMode;
        // init here to support AOT (TODO may be will work with ng-packgr - need to check)
        this.onTouched = () => { };
        this.onChange = () => { };
        this.imaskElement = DEFAULT_IMASK_ELEMENT;
        this.accept = new EventEmitter();
        this.complete = new EventEmitter();
        this._viewInitialized = false;
        this._composing = false;
        this._writing = false;
        if (this._compositionMode == null) {
            this._compositionMode = !this._isAndroid();
        }
    }
    get element() {
        return this.imaskElement(this._elementRef, this);
    }
    get maskValue() {
        if (!this.maskRef)
            return this.element.value;
        if (this.unmask === 'typed')
            return this.maskRef.typedValue;
        if (this.unmask)
            return this.maskRef.unmaskedValue;
        return this.maskRef.value;
    }
    set maskValue(value) {
        if (this.maskRef) {
            if (this.unmask === 'typed')
                this.maskRef.typedValue = value;
            else if (this.unmask)
                this.maskRef.unmaskedValue = value;
            else
                this.maskRef.value = value;
        }
        else {
            this._renderer.setProperty(this.element, 'value', value);
        }
    }
    ngAfterViewInit() {
        if (this.imask)
            this.initMask();
        this._viewInitialized = true;
    }
    ngOnChanges(changes) {
        if (changes.elementRef && !this.imaskElement)
            this.imaskElement = DEFAULT_IMASK_ELEMENT;
        if (!changes.imask || !this._viewInitialized)
            return;
        if (this.imask) {
            if (this.maskRef)
                this.maskRef.updateOptions(this.imask);
            else {
                this.initMask();
                this.onChange(this.maskValue);
            }
        }
        else {
            this.destroyMask();
        }
    }
    destroyMask() {
        if (this.maskRef) {
            this.maskRef.destroy();
            delete this.maskRef;
        }
    }
    ngOnDestroy() {
        this.destroyMask();
        this.accept.complete();
        this.complete.complete();
    }
    beginWrite(value) {
        this._writing = true;
        this._writingValue = value;
    }
    endWrite() {
        this._writing = false;
        return this._writingValue;
    }
    writeValue(value) {
        value = value == null ? '' : value;
        if (this.maskRef) {
            this.beginWrite(value);
            if (this.maskValue !== value ||
                // handle cases like Number('') === 0,
                // for details see https://github.com/uNmAnNeR/imaskjs/issues/134
                (typeof value !== 'string' && this.maskRef.value === '') &&
                    !this.maskRef.el.isActive) {
                this.maskValue = value;
            }
        }
        else {
            this._renderer.setProperty(this.element, 'value', value);
        }
    }
    _onAccept() {
        const value = this.maskValue;
        // if value was not changed during writing don't fire events
        // for details see https://github.com/uNmAnNeR/imaskjs/issues/136
        if (this._writing && value === this.endWrite())
            return;
        this.onChange(value);
        this.accept.emit(value);
    }
    _onComplete() {
        this.complete.emit(this.maskValue);
    }
    initMask() {
        this.maskRef = this._factory.create(this.element, this.imask)
            .on('accept', this._onAccept.bind(this))
            .on('complete', this._onComplete.bind(this));
    }
    setDisabledState(isDisabled) {
        this._renderer.setProperty(this.element, 'disabled', isDisabled);
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    _handleInput(value) {
        // if mask is attached all input goes throw mask
        if (this.maskRef)
            return;
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this.onChange(value);
        }
    }
    _compositionStart() { this._composing = true; }
    _compositionEnd(value) {
        this._composing = false;
        this._compositionMode && this._handleInput(value);
    }
    _isAndroid() {
        return /android (\d+)/.test(navigator.userAgent.toLowerCase());
    }
}
IMaskDirective.decorators = [
    { type: Directive, args: [{
                selector: '[imask]',
                host: {
                    '(input)': '_handleInput($event.target.value)',
                    '(blur)': 'onTouched()',
                    '(compositionstart)': '_compositionStart()',
                    '(compositionend)': '_compositionEnd($event.target.value)'
                },
                providers: [MASKEDINPUT_VALUE_ACCESSOR]
            },] }
];
IMaskDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: IMaskFactory },
    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }
];
IMaskDirective.propDecorators = {
    imask: [{ type: Input }],
    unmask: [{ type: Input }],
    imaskElement: [{ type: Input }],
    accept: [{ type: Output }],
    complete: [{ type: Output }]
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hc2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ltYXNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBWSxTQUFTLEVBQ3JFLFlBQVksRUFDWixRQUFRLEVBQUUsTUFBTSxHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLHVCQUF1QixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFbEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBSS9DLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFhO0lBQ2xELE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDN0MsS0FBSyxFQUFFLElBQUk7Q0FDWixDQUFDO0FBRUYsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLFVBQWUsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQzs7QUFXNUUsTUFBTSxPQUFPLGNBQWM7SUFlekIsWUFBb0IsV0FBdUIsRUFDdkIsU0FBb0IsRUFDcEIsUUFBc0IsRUFDdUIsZ0JBQXlCO1FBSHRFLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ3ZCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDcEIsYUFBUSxHQUFSLFFBQVEsQ0FBYztRQUN1QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQVM7UUFDeEYsa0ZBQWtGO1FBQ2xGLElBQUksQ0FBQyxTQUFTLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxZQUFZLEdBQUcscUJBQXFCLENBQUM7UUFDMUMsSUFB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QUMsS0FBSyxDQUFDLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRUQsaUJBQWlCLEtBQVcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXJELGVBQWUsQ0FBQyxLQUFVO1FBQ3hCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFTyxVQUFVO1FBQ2hCLE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7SUFDakUsQ0FBQzs7O1lBOUtGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsU0FBUztnQkFDbkIsSUFBSSxFQUFFO29CQUNKLFNBQVMsRUFBRSxtQ0FBbUM7b0JBQzlDLFFBQVEsRUFBRSxhQUFhO29CQUN2QixvQkFBb0IsRUFBRSxxQkFBcUI7b0JBQzNDLGtCQUFrQixFQUFFLHNDQUFzQztpQkFDM0Q7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsMEJBQTBCLENBQUM7YUFDeEM7OztZQTFCWSxVQUFVO1lBQXVDLFNBQVM7WUFNOUQsWUFBWTswQ0F1Q04sUUFBUSxZQUFJLE1BQU0sU0FBQyx1QkFBdUI7OztvQkFUdEQsS0FBSztxQkFDTCxLQUFLOzJCQUNMLEtBQUs7cUJBQ0wsTUFBTTt1QkFDTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPdXRwdXQsIGZvcndhcmRSZWYsIFByb3ZpZGVyLCBSZW5kZXJlcjIsXHJcbiAgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCxcclxuICBPcHRpb25hbCwgSW5qZWN0LCBTaW1wbGVDaGFuZ2VzLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIENPTVBPU0lUSU9OX0JVRkZFUl9NT0RFIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuaW1wb3J0IHsgSU1hc2tGYWN0b3J5IH0gZnJvbSAnLi9pbWFzay1mYWN0b3J5JztcclxuaW1wb3J0IElNYXNrIGZyb20gJ2ltYXNrJztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgTUFTS0VESU5QVVRfVkFMVUVfQUNDRVNTT1I6IFByb3ZpZGVyID0ge1xyXG4gIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IElNYXNrRGlyZWN0aXZlKSxcclxuICBtdWx0aTogdHJ1ZVxyXG59O1xyXG5cclxuY29uc3QgREVGQVVMVF9JTUFTS19FTEVNRU5UID0gKGVsZW1lbnRSZWY6IGFueSkgPT4gZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tpbWFza10nLFxyXG4gIGhvc3Q6IHtcclxuICAgICcoaW5wdXQpJzogJ19oYW5kbGVJbnB1dCgkZXZlbnQudGFyZ2V0LnZhbHVlKScsXHJcbiAgICAnKGJsdXIpJzogJ29uVG91Y2hlZCgpJyxcclxuICAgICcoY29tcG9zaXRpb25zdGFydCknOiAnX2NvbXBvc2l0aW9uU3RhcnQoKScsXHJcbiAgICAnKGNvbXBvc2l0aW9uZW5kKSc6ICdfY29tcG9zaXRpb25FbmQoJGV2ZW50LnRhcmdldC52YWx1ZSknXHJcbiAgfSxcclxuICBwcm92aWRlcnM6IFtNQVNLRURJTlBVVF9WQUxVRV9BQ0NFU1NPUl1cclxufSlcclxuZXhwb3J0IGNsYXNzIElNYXNrRGlyZWN0aXZlPE9wdHMgZXh0ZW5kcyBJTWFzay5BbnlNYXNrZWRPcHRpb25zPiBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcyB7XHJcbiAgbWFza1JlZj86IElNYXNrLklucHV0TWFzazxPcHRzPjtcclxuICBvblRvdWNoZWQ6IGFueTtcclxuICBvbkNoYW5nZTogYW55O1xyXG4gIHByaXZhdGUgX3ZpZXdJbml0aWFsaXplZDogYm9vbGVhbjtcclxuICBwcml2YXRlIF9jb21wb3Npbmc6IGJvb2xlYW47XHJcbiAgcHJpdmF0ZSBfd3JpdGluZ1ZhbHVlOiBhbnk7XHJcbiAgcHJpdmF0ZSBfd3JpdGluZzogYm9vbGVhbjtcclxuXHJcbiAgQElucHV0KCkgaW1hc2s/OiBPcHRzO1xyXG4gIEBJbnB1dCgpIHVubWFzaz86IGJvb2xlYW58J3R5cGVkJztcclxuICBASW5wdXQoKSBpbWFza0VsZW1lbnQ6IChlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBkaXJlY3RpdmVSZWY6IGFueSkgPT4gSU1hc2suTWFza0VsZW1lbnQ7XHJcbiAgQE91dHB1dCgpIGFjY2VwdDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgQE91dHB1dCgpIGNvbXBsZXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgICAgICAgICAgICBwcml2YXRlIF9yZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgX2ZhY3Rvcnk6IElNYXNrRmFjdG9yeSxcclxuICAgICAgICAgICAgICBAT3B0aW9uYWwoKSBASW5qZWN0KENPTVBPU0lUSU9OX0JVRkZFUl9NT0RFKSBwcml2YXRlIF9jb21wb3NpdGlvbk1vZGU6IGJvb2xlYW4pIHtcclxuICAgIC8vIGluaXQgaGVyZSB0byBzdXBwb3J0IEFPVCAoVE9ETyBtYXkgYmUgd2lsbCB3b3JrIHdpdGggbmctcGFja2dyIC0gbmVlZCB0byBjaGVjaylcclxuICAgIHRoaXMub25Ub3VjaGVkID0gKCkgPT4ge307XHJcbiAgICB0aGlzLm9uQ2hhbmdlID0gKCkgPT4ge307XHJcbiAgICB0aGlzLmltYXNrRWxlbWVudCA9IERFRkFVTFRfSU1BU0tfRUxFTUVOVDtcclxuICAgIHRoaXMuYWNjZXB0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgdGhpcy5jb21wbGV0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIHRoaXMuX3ZpZXdJbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5fY29tcG9zaW5nID0gZmFsc2U7XHJcbiAgICB0aGlzLl93cml0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKHRoaXMuX2NvbXBvc2l0aW9uTW9kZSA9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX2NvbXBvc2l0aW9uTW9kZSA9ICF0aGlzLl9pc0FuZHJvaWQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBlbGVtZW50ICgpIHtcclxuICAgIHJldHVybiB0aGlzLmltYXNrRWxlbWVudCh0aGlzLl9lbGVtZW50UmVmLCB0aGlzKTtcclxuICB9XHJcblxyXG4gIGdldCBtYXNrVmFsdWUgKCk6IGFueSB7XHJcbiAgICBpZiAoIXRoaXMubWFza1JlZikgcmV0dXJuIHRoaXMuZWxlbWVudC52YWx1ZTtcclxuXHJcbiAgICBpZiAodGhpcy51bm1hc2sgPT09ICd0eXBlZCcpIHJldHVybiB0aGlzLm1hc2tSZWYudHlwZWRWYWx1ZTtcclxuICAgIGlmICh0aGlzLnVubWFzaykgcmV0dXJuIHRoaXMubWFza1JlZi51bm1hc2tlZFZhbHVlO1xyXG4gICAgcmV0dXJuIHRoaXMubWFza1JlZi52YWx1ZTtcclxuICB9XHJcblxyXG4gIHNldCBtYXNrVmFsdWUgKHZhbHVlOiBhbnkpIHtcclxuICAgIGlmICh0aGlzLm1hc2tSZWYpIHtcclxuICAgICAgaWYgKHRoaXMudW5tYXNrID09PSAndHlwZWQnKSB0aGlzLm1hc2tSZWYudHlwZWRWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICBlbHNlIGlmICh0aGlzLnVubWFzaykgdGhpcy5tYXNrUmVmLnVubWFza2VkVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgZWxzZSB0aGlzLm1hc2tSZWYudmFsdWUgPSB2YWx1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFByb3BlcnR5KHRoaXMuZWxlbWVudCwgJ3ZhbHVlJywgdmFsdWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgaWYgKHRoaXMuaW1hc2spIHRoaXMuaW5pdE1hc2soKTtcclxuXHJcbiAgICB0aGlzLl92aWV3SW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGNoYW5nZXMuZWxlbWVudFJlZiAmJiAhdGhpcy5pbWFza0VsZW1lbnQpIHRoaXMuaW1hc2tFbGVtZW50ID0gREVGQVVMVF9JTUFTS19FTEVNRU5UO1xyXG5cclxuICAgIGlmICghY2hhbmdlcy5pbWFzayB8fCAhdGhpcy5fdmlld0luaXRpYWxpemVkKSByZXR1cm47XHJcblxyXG4gICAgaWYgKHRoaXMuaW1hc2spIHtcclxuICAgICAgaWYgKHRoaXMubWFza1JlZikgdGhpcy5tYXNrUmVmLnVwZGF0ZU9wdGlvbnModGhpcy5pbWFzayk7XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW5pdE1hc2soKTtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMubWFza1ZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5kZXN0cm95TWFzaygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZGVzdHJveU1hc2sgKCkge1xyXG4gICAgaWYgKHRoaXMubWFza1JlZikge1xyXG4gICAgICB0aGlzLm1hc2tSZWYuZGVzdHJveSgpO1xyXG4gICAgICBkZWxldGUgdGhpcy5tYXNrUmVmO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmdPbkRlc3Ryb3kgKCkge1xyXG4gICAgdGhpcy5kZXN0cm95TWFzaygpO1xyXG4gICAgdGhpcy5hY2NlcHQuY29tcGxldGUoKTtcclxuICAgIHRoaXMuY29tcGxldGUuY29tcGxldGUoKTtcclxuICB9XHJcblxyXG4gIGJlZ2luV3JpdGUgKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMuX3dyaXRpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5fd3JpdGluZ1ZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBlbmRXcml0ZSAoKTogYW55IHtcclxuICAgIHRoaXMuX3dyaXRpbmcgPSBmYWxzZTtcclxuICAgIHJldHVybiB0aGlzLl93cml0aW5nVmFsdWU7XHJcbiAgfVxyXG5cclxuICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpIHtcclxuICAgIHZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XHJcblxyXG4gICAgaWYgKHRoaXMubWFza1JlZikge1xyXG4gICAgICB0aGlzLmJlZ2luV3JpdGUodmFsdWUpO1xyXG5cclxuICAgICAgaWYgKHRoaXMubWFza1ZhbHVlICE9PSB2YWx1ZSB8fFxyXG4gICAgICAgIC8vIGhhbmRsZSBjYXNlcyBsaWtlIE51bWJlcignJykgPT09IDAsXHJcbiAgICAgICAgLy8gZm9yIGRldGFpbHMgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91Tm1Bbk5lUi9pbWFza2pzL2lzc3Vlcy8xMzRcclxuICAgICAgICAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB0aGlzLm1hc2tSZWYudmFsdWUgPT09ICcnKSAmJlxyXG4gICAgICAgICAgIXRoaXMubWFza1JlZi5lbC5pc0FjdGl2ZVxyXG4gICAgICApIHtcclxuICAgICAgICB0aGlzLm1hc2tWYWx1ZSA9IHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmVsZW1lbnQsICd2YWx1ZScsIHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9vbkFjY2VwdCAoKSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMubWFza1ZhbHVlO1xyXG4gICAgLy8gaWYgdmFsdWUgd2FzIG5vdCBjaGFuZ2VkIGR1cmluZyB3cml0aW5nIGRvbid0IGZpcmUgZXZlbnRzXHJcbiAgICAvLyBmb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3VObUFuTmVSL2ltYXNranMvaXNzdWVzLzEzNlxyXG4gICAgaWYgKHRoaXMuX3dyaXRpbmcgJiYgdmFsdWUgPT09IHRoaXMuZW5kV3JpdGUoKSkgcmV0dXJuO1xyXG4gICAgdGhpcy5vbkNoYW5nZSh2YWx1ZSk7XHJcbiAgICB0aGlzLmFjY2VwdC5lbWl0KHZhbHVlKTtcclxuICB9XHJcblxyXG4gIF9vbkNvbXBsZXRlICgpIHtcclxuICAgIHRoaXMuY29tcGxldGUuZW1pdCh0aGlzLm1hc2tWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGluaXRNYXNrICgpIHtcclxuICAgIHRoaXMubWFza1JlZiA9IHRoaXMuX2ZhY3RvcnkuY3JlYXRlKHRoaXMuZWxlbWVudCwgdGhpcy5pbWFzayBhcyBPcHRzKVxyXG4gICAgICAub24oJ2FjY2VwdCcsIHRoaXMuX29uQWNjZXB0LmJpbmQodGhpcykpXHJcbiAgICAgIC5vbignY29tcGxldGUnLCB0aGlzLl9vbkNvbXBsZXRlLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgc2V0RGlzYWJsZWRTdGF0ZSAoaXNEaXNhYmxlZDogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fcmVuZGVyZXIuc2V0UHJvcGVydHkodGhpcy5lbGVtZW50LCAnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKVxyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKF86IGFueSkgPT4gdm9pZCk6IHZvaWQgeyB0aGlzLm9uQ2hhbmdlID0gZm4gfVxyXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZCB7IHRoaXMub25Ub3VjaGVkID0gZm4gfVxyXG5cclxuICBfaGFuZGxlSW5wdXQodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgLy8gaWYgbWFzayBpcyBhdHRhY2hlZCBhbGwgaW5wdXQgZ29lcyB0aHJvdyBtYXNrXHJcbiAgICBpZiAodGhpcy5tYXNrUmVmKSByZXR1cm47XHJcblxyXG4gICAgaWYgKCF0aGlzLl9jb21wb3NpdGlvbk1vZGUgfHwgKHRoaXMuX2NvbXBvc2l0aW9uTW9kZSAmJiAhdGhpcy5fY29tcG9zaW5nKSkge1xyXG4gICAgICB0aGlzLm9uQ2hhbmdlKHZhbHVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9jb21wb3NpdGlvblN0YXJ0KCk6IHZvaWQgeyB0aGlzLl9jb21wb3NpbmcgPSB0cnVlOyB9XHJcblxyXG4gIF9jb21wb3NpdGlvbkVuZCh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLl9jb21wb3NpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuX2NvbXBvc2l0aW9uTW9kZSAmJiB0aGlzLl9oYW5kbGVJbnB1dCh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9pc0FuZHJvaWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gL2FuZHJvaWQgKFxcZCspLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==